#nop -------------------------------------------------------------------------
#nop A HUD like prompt handler
#nop -------------------------------------------------------------------------
#showme {${INFO}Loading prompt.${INFO}};

#variable {cur_load} {};
#variable {max_load} {};
#alias {rlprompt} { #read {$dir/Prompts.tin} }

#variable {language} {};
#variable {composing} {};
#variable {combat_mode} {};
#variable {aiming} {};
#variable {endurance} {};
#variable {aspect1} {};
#variable {aspect2} {};
#variable {encumbrance} {};
#variable {fatigue} {};
#variable {sobriety} {};
#variable {hunger} {};
#variable {thirst} {};
#variable {position} {};
#variable {condition} {};
#variable {disguise} {};
#variable {time_of_day} {};
#variable {health} {};
#variable {stamina} {};
#variable {piety} {};
#variable {activity} {};
#variable {speed} {};

#variable {paused} {};
#variable {lineone} {};
#variable {linetwo} {};
#variable {linethree} {};

#macro {\eOP} {
    #config {convert meta} {on};
    #delay {5} {
        #config {convert meta} {off};
    };
};


#nop multi-line for when it doesn't span blocks;
#substitute {mode %*, aiming %*, endurance\[%*\]%aweapon aspects %* and %*%acurrently %*, fatigue %*%aalcohol %* hunger %* thirst %*%astate %*%ayou %w%atime %*\n\n}{};

#nop profile t returns the following strings, hide them;
#substitute {~^speaking \e[32%*, composing \e[32%*\n}{};
#substitute {~^mode \e[32m%*, aiming \e[32m%*, endurance\[\e[32m%*\]%*\n}{};
#substitute {~^weapon aspects \e[32m%* and \e[32m%*\n}{};
#substitute {~^currently \e[32m%*, fatigue \e[32m%*\n}{};
#substitute {~^alcohol \e[32m%* hunger \e[32m%* thirst \e[32m%*\n}{};
#substitute {~^state %c%w%c\n%a}{};
#substitute {~^you \e[32m%w%c\n%a}{};
#substitute {~^time \e[32m%*\n%a}{};
#substitute {~^you are currently cloaked or hooded \n%a}{};

#nop hide the prompt;
#substitute {<%*/%*/%*>} {};

#event {RECEIVED OUTPUT} {

    #local {txt} {%0};

    #nop match the string, extract the data, clear the string;
    #nop be mindful that the string may be conjoined with other lines (hence %!*);
    #regexp {%1} {%!*speaking %*, composing %*%!+1..A} {
        #format {language} {%n} {&1};
        #format {composing} {%n} {&2};
    };

    #regexp {%1} {%!*mode %*, aiming %*, endurance\[%*\]%*%!+1..A} {
        #format {combat_mode} {%n} {&1};
        #format {aiming} {%n} {&2};
        #format {endurance} {%n} {&3};
    };

    #regexp {%1} {%!*weapon aspects %* and %*%!+1..A} {
        #format {aspect1} {%n} {&1};
        #format {aspect2} {%n} {&2};
    };

    #regexp {%1} {%!*currently %*, fatigue %*%!+1..A} {
        #format {encumbrance} {%n} {&1};
        #format {fatigue} {%n} {&2};

    };

    #regexp {%1} {%!*alcohol %* hunger %* thirst %*%!+1..A} {
        #format {sobriety} {%n} {&1};
        #format {hunger} {%n} {&2};
        #format {thirst} {%n} {&3};

    };    


    #regexp {%1} {%!*state {sitting|standing|resting|sleeping|fighting}%!+1..A} {
        #format {position} {%n} {&1};

    };

    #regexp {%1} {%!*you {trudge|pace|walk|jog|run|sprint}%!+1..A} {
        #format {speed} {%n} {&1};

    };

    #regexp {%1} {%!*time %*%!+1..A} {
        #format {time_of_day} {%n} {&1};
        #nop This should be set by the very next line if it's coming at all;
        #variable {disguise} {};

    };

    #regexp {%1} {%!*you are currently cloaked or hooded %!+1..A} {
        #variable {disguise} {Cloaked or hooded};

    };

    #regexp {%1} {%!*<%*\/%*\/%*{\/|\>}} { 
        #format {health} {%n} {&1};
        #format {stamina} {%s} {&2};
        #format {piety} {%s} {&3};
        #format {activity} {%n} {};
    };

    #regexp {%1} {%!*<%!*\/%!*\/%!*\/%*>} { 
        #format {activity} {%n} {&1};
    };


    #regexp {%1} {%*Goodbye, friend.. Come back soon!%*} {
        polloff;
        #nop #showme {${MEDIUM}Status polling disabled while in menu. Use `pollon` to resume.${RESET}};
    };

    #regexp {%1} {%*Type @help for editor options.%*} {
        polloff;
        #nop #showme {${MEDIUM}Status polling disabled while editing. Use `pollon` to resume.${RESET}};
    };

    #regexp {%1} {%*Press return to continue - 'q' to quit%*} {
        polloff;
        #nop #showme {${MEDIUM}Status polling disabled while reading help. Use `pollon` to resume.${RESET}};
    };
}


#function start_poll {
    #ticker {poll} {
        #if {$paused} { #return };
        #send {profile t};
    } {4};
};

#function stop_poll {
    #unticker {poll};
    #nop #showme {${INFO}Status polling ended.${RESET}};
};

#alias {pollon} {
    #variable {paused} {0};
    #variable {tmp} {@start_poll{};};
    #nop #showme {${INFO}Polling for status.${RESET}};
};
#alias {polloff} { 
    #if {$paused} { #return };
    #variable {paused} {1};
    #variable {tmp} {@stop_poll{};} 
};


#ticker hud {
    #screen get {COLS} {cols};

    #format {topbar} {%-100s} { };
    #format {bottombar1} {%-100s} { };
    #format {bottombar2} {%-100s} { };

    #showme {$topbar} {%s} {-5} {-3};
    #showme {$bottombar1} {%s} {-4} {-3};
    #showme {$bottombar2} {%s} {-3} {-3};
    
    #format {topbar} {%s %s %s %s %s %s %-100s} {@get_time{}} {@get_hunger{}} {@get_thirst{}} {@get_sobriety{}} {@get_language{}} {@get_composing{}} {};
    #showme {$topbar} {-5} {3};


    #format {bottombar1} {%s%s %s %s %s %s %-100s} {@get_disguise{}} {@get_speed{}} {@get_position{}} {@get_combat_mode{}} {@get_aiming{}} {@get_aspect{}} {};
    #showme {$bottombar1} {-4} {3};
    

    #format {bottombar2} {%s %s %s %s %s %-100s} {@get_health{}} {@get_stamina{}} {@get_piety{}} {@get_encumbrance{}} {@get_activity{}} {};
    #showme {$bottombar2} {-3} {3};

    #if {$paused} {
        #showme {${FG_RED}◉${RESET}} {-5} {$cols-2};
    } {
        #showme {${FG_GREEN}◉${RESET}} {-5} {$cols-2};
    };

    #showme {│} {-5} {$cols};
    #showme {│} {-4} {$cols};
    #showme {│} {-3} {$cols};

} {1};


#nop topbar;
#function get_time {
    #variable {result} {};
    #switch {{$time_of_day}} {
        #case {{Dawn}} {
            #format {result} {${FG_BYELLOW} %s${RESET}} {$time_of_day};
        };
        #case {{Early morning}} {
            #format {result} {${FG_BYELLOW} %s${RESET}} {$time_of_day};
        };
        #case {{Morning}} {
            #format {result} {${FG_BYELLOW} %s${RESET}} {$time_of_day};
        };
        #case {{Late morning}} {
            #format {result} {${FG_BYELLOW} %s${RESET}} {$time_of_day};
        };
        #case {{High sun}} {
            #format {result} {${FG_YELLOW} %s${RESET}} {$time_of_day};
        };
        #case {{Early afternoon}} {
            #format {result} {${FG_YELLOW} %s${RESET}} {$time_of_day};
        };
        #case {{Afternoon}} {
            #format {result} {${FG_YELLOW} %s${RESET}} {$time_of_day};
        };
        #case {{Late afternoon}} {
            #format {result} {${FG_BRED} %s${RESET}} {$time_of_day};
        };
        #case {{Dusk}} {
            #format {result} {${FG_RED} %s${RESET}} {$time_of_day};
        };
        #case {{Twilight}} {
            #format {result} {${FG_BMAGENTA} %s${RESET}} {$time_of_day};
        };
        #case {{Evening}} {
            #format {result} {${FG_MAGENTA} %s${RESET}} {$time_of_day};
        };
        #case {{Night time}} {
            #format {result} {${FG_BBLUE} %s${RESET}} {$time_of_day};
        };
        #case {{Before midnight}} {
            #format {result} {${FG_BBLUE} %s${RESET}} {$time_of_day};
        };
        #case {{Midnight}} {
            #format {result} {${FG_BLUE} %s${RESET}} {$time_of_day};
        };
        #case {{After midnight}} {
            #format {result} {${FG_BLUE} %s${RESET}} {$time_of_day};
        };
        #case {{Late at night}} {
            #format {result} {${FG_BLUE} %s${RESET}} {$time_of_day};
        };
        #case {{Before dawn}} {
            #format {result} {${FG_BBLUE} %s${RESET}} {$time_of_day};
        };
        #default  { #format {result} {? %s} {$time_of_day};};
    };
    #return {$result};
};

#function get_hunger {
    #variable {result} {$hunger};
    #replace {result} {Feeling } {};
    #switch {{$result}} {
        #case {{Absolutely stuffed}} {
            #format {result} {${FG_GREEN}󱐟 %n${RESET}} {$result};
        };
        #case {{Quite full}} {
            #format {result} {${FG_BGREEN}󱐟 %n${RESET}} {$result};
        };
        #case {{peckish}} {
            #format {result} {${FG_BYELLOW}󱐟 %n${RESET}} {$result};
        };
        #case {{slightly hungry}} {
            #format {result} {${FG_YELLOW}󱐟 %n${RESET}} {$result};
        };
        #case {{Hungry}} {
            #format {result} {${FG_BRED}󱐟 %n${RESET}} {$result};
        };
        #case {{Starving}} {
            #format {result} {${FG_RED}󱐟 %n${RESET}} {$result};
        };
        #default  { #format {result} {? %n} {$result};};
    };
    #return {$result};
};

#function get_thirst {
    #variable {result} {$thirst};
    #replace {result} {Feeling } {};
    #switch {{$result}} {
        #case {{Completely sated}} {
            #format {result} {${FG_GREEN}󰆫 %n${RESET}} {$result};
        };
        #case {{Nicely quenched}} {
            #format {result} {${FG_BGREEN}󰆫 %n${RESET}} {$result};
        };
        #case {{slightly thirsty}} {
            #format {result} {${FG_BYELLOW}󰆫 %n${RESET}} {$result};
        };
        #case {{thirsty}} {
            #format {result} {${FG_YELLOW}󰆫 %n${RESET}} {$result};
        };
        #case {{Parched}} {
            #format {result} {${FG_BRED}󰆫 %n${RESET}} {$result};
        };
        #case {{Quite parched}} {
            #format {result} {${FG_BRED}󰆫 %n${RESET}} {$result};
        };
        #case {{Dying of thirst}} {
            #format {result} {${FG_RED}󰆫 %n${RESET}} {$result};
        };
        #default  { #format {result} {? %n} {$result};};
    };
    #return {$result};
};

#function get_sobriety {
    #variable {result} {$sobriety};
    #switch {{$result}} {
        #case {{Sober}} {
            #format {result} {${FG_GREEN} %n${RESET}} {$result};
        };
        #default  { #format {result} {? %n} {$result};};
    };
    #return {$result};
};

#function get_language {
    #variable {result} {$language};
    #if {"$result" == "Harnic"} {
        #format {result} {${FG_CYAN}󰭹 %s${RESET}} {$result};
    } {
        #format {result} {${FG_BCYAN}󰭹 %s${RESET}} {$result};
    };
    #return {$result};
};

#function get_composing {
    #variable {result} {$composing};
    #if {"$result" == "Nothing"} {
        #format {result} {${FG_CYAN}󰛓 %s${RESET}} {Drawing};
    } {
        #format {result} {${FG_BCYAN}󰛓 %s${RESET}} {$result};
    };
    #return {$result};
};


#nop bottombar1;
#function get_disguise {
    #variable {result} {};
    #if {"$disguise" != "%s"} { 
        #format {result} {${FG_MAGENTA}󱀣 %s ${$RESET}} {$disguise}; 
    };
    #return {$result};
};

#function get_health {
    #variable {result} {};
    #switch {{$health}} {
        #case {{Unhurt}} {
            #format {result} {${FG_GREEN} %-6s${RESET}} {■■■■■■};
        };
        #case {{Superficial}} {
            #format {result} {${FG_BGREEN} %-6s${RESET}} {■■■■■};
        };
        #case {{Minor}} {
            #format {result} {${FG_BYELLOW} %-6s${RESET}} {■■■■};
        };
        #case {{Moderate}} {
            #format {result} {${FG_YELLOW} %-6s${RESET}} {■■■};
        };
        #case {{Severe}} {
            #format {result} {${FG_MAGENTA} %-6s${RESET}} {■■};
        };
        #case {{Mortal}} {
            #format {result} {${FG_RED} %-6s${RESET}} {■};
        };
        #default { 
            #format {result} {${FG_BRED} %-6s${RESET}} {};
        };
    };
    #return {$result};
};

#function get_stamina {
    #variable {result} {};
    #local {length} {0};
    #format {result} {%p} {$stamina};
    #format {length} {%L} {$result};
    #replace {result} {|} {■};
    #switch {$length} {
        #case {8} {
            #format {result} {${FG_GREEN} %-8s${RESET}} {$result};
        };
        #case {7} {
            #format {result} {${FG_BGREEN} %-8s${RESET}} {$result};
        };
        #case {6} {
            #format {result} {${FG_BYELLOW} %-8s${RESET}} {$result};
        };
        #case {5} {
            #format {result} {${FG_YELLOW} %-8s${RESET}} {$result};
        };
        #case {4} {
            #format {result} {${FG_BLUE} %-8s${RESET}} {$result};
        };
        #case {3} {
            #format {result} {${FG_BMAGENTA} %-8s${RESET}} {$result};
        };
        #case {2} {
            #format {result} {${FG_MAGENTA} %-8s${RESET}} {$result};
        };
        #case {1} {
            #format {result} {${FG_BRED} %-8s${RESET}} {$result};
        };
        #default  { 
            #format {result} {${FG_RED} %-8s${RESET}} {$result};
        };
    };
    #return {$result};
};

#function get_piety {
    #variable {result} {};
    #local {length} {0};
    #format {result} {%p} {$piety};
    #format {length} {%L} {$result};
    #replace {result} {+} {■};
    #switch {$length} {
        #case {6} {
            #format {result} {${FG_GREEN} %-6s${RESET}} {$result};
        };
        #case {5} {
            #format {result} {${FG_BGREEN} %-6s${RESET}} {$result};
        };
        #case {4} {
            #format {result} {${FG_BYELLOW} %-6s${RESET}} {$result};
        };
        #case {3} {
            #format {result} {${FG_YELLOW} %-6s${RESET}} {$result};
        };
        #case {2} {
            #format {result} {${FG_BMAGENTA} %-6s${RESET}} {$result};
        };
        #case {1} {
            #format {result} {${FG_MAGENTA} %-6s${RESET}} {$result};
        };
        #default  { 
            #format {result} {${FG_BRED} %-6s${RESET}} {$result};
        };
    };
    #return {$result};
};

#function get_activity {
    #variable {result} {};
    #if {"$activity" != "%s"} {
        #format {result} { %s} {$activity};
    };
    #return {$result};
};


#function get_fatigue {
    #variable {result} {};
    #switch {{$fatigue}} {
        #case {{Completely Rested}} {
            #format {result} {${FG_GREEN}󰋣 %s${RESET}} {$fatigue};
        };
        #case {{Relatively Fresh}} {
            #format {result} {${FG_BGREEN}󰋣 %s${RESET}} {$fatigue};
        };
        #case {{Somewhat Winded}} {
            #format {result} {${FG_BYELLOW}󰋣 %s${RESET}} {$fatigue};
        };
        #case {{Winded}} {
            #format {result} {${FG_YELLOW}󰋣 %s${RESET}} {$fatigue};
        };
        #case {{Somewhat Tired}} {
            #format {result} {${FG_BLUE}󰋣 %s${RESET}} {$fatigue};
        };
        #case {{Tired}} {
            #format {result} {${FG_BMAGENTA}󰋣 %s${RESET}} {$fatigue};
        };
        #case {{Extremely Tired}} {
            #format {result} {${FG_MAGENTA}󰋣 %s${RESET}} {$fatigue};
        };
        #case {{Exhausted}} {
            #format {result} {${FG_RED}󰋣 %s${RESET}} {$fatigue};
        };
        #case {{Completely Exhausted}} {
            #format {result} {${FG_BRED}󰋣 %s${RESET}} {$fatigue};
        };
        #default  { #format {result} {? %s} {$fatigue};};
    };
    #return {$result};
};

#function get_combat_mode {
    #variable {result} {};
    #switch {{$combat_mode}} {
        #case {{Frantic}} {
            #format {result} {${FG_RED}󰞇 %s${RESET}} {$combat_mode};
        };
        #case {{Aggressive}} {
            #format {result} {${FG_YELLOW}󰞇 %s${RESET}} {$combat_mode};
        };
        #case {{Normal}} {
            #format {result} {${FG_CYAN}󰞇 %s${RESET}} {$combat_mode};
        };
        #case {{Careful}} {
            #format {result} {${FG_BLUE}󰞇 %s${RESET}} {$combat_mode};
        };
        #case {{Defensive}} {
            #format {result} {${FG_MAGENTA}󰞇 %s${RESET}} {$combat_mode};
        };
        #default  { #format {result} {󰞇 %s} {$combat_mode};};
    };
    #return {$result};
};

#function get_aiming {
    #variable {result} {${FG_CYAN}󰣉 $aiming${RESET}};
    #replace {result} {Normal} {Mid};
    #return {$result};
};

#nop bottombar2;
#function get_aspect {
    #variable {result} {};
    #if {"$aspect1" != "Not Set"} {
        #variable {result} {$aspect1};
    };
    #if {"$aspect2" != "Not Set"} {
        #format {result} {%s%s} {$result} {$aspect2};
    };
    #replace {result} {Edge} {󰓥};
    #replace {result} {Pierce} {󰧼};
    #replace {result} {Blunt} {󰣪};
    #if {"$result" == ""} {
        #variable {result} {${FG_CYAN} Unarmed${RESET}};
    } {
        #format {result} {${FG_YELLOW}%s Armed${RESET}} {$result};
    };
    #return {$result};
};

#function get_speed {
    #variable {result} {};
    #switch {{$speed}} {
        #case {{Trudge}} {
            #format {result} {${FG_BLUE}󰖃 %s${RESET}} {$speed};
        };
        #case {{Pace}} {
            #format {result} {${FG_BBLUE} %s${RESET}} {$speed};
        };
        #case {{Walk}} {
            #format {result} {${FG_CYAN} %s${RESET}} {$speed};
        };
        #case {{Jog}} {
            #format {result} {${FG_BYELLOW}󰑮 %s${RESET}} {$speed};
        };
        #case {{Run}} {
            #format {result} {${FG_YELLOW}󰑮 %s${RESET}} {$speed};
        };
        #case {{Sprint}} {
            #format {result} {${FG_RED}󰑮 %s${RESET}} {$speed};
        };
        #default  { #format {result} {? %s} {$speed};};
    };
    #return {$result};
};

#function get_position {
    #variable {result} {};
    #switch {{$position}} {
        #case {{Standing}} {
            #format {result} {${FG_CYAN} %s${RESET}} {$position};
        };
        #case {{Sitting}} {
            #format {result} {${FG_BYELLOW}󱉉 %s${RESET}} {$position};
        };
        #case {{Resting}} {
            #format {result} {${FG_MAGENTA}󰋣 %s${RESET}} {$position};
        };
        #case {{Sleeping}} {
            #format {result} {${FG_BLUE}󰒲 %s${RESET}} {$position};
        };
        #case {{Fighting}} {
            #format {result} {${FG_BRED}󰞇 %s${RESET}} {$position};
        };

        #default  { #format {result} {? %s} {$position};};
    };
    #return {$result};
};

#function get_encumbrance {
    #variable {result} {};
    #switch {{$encumbrance}} {
        #case {{Unencumbered}} {
            #format {result} {${FG_BGREEN}󰖡 %s${RESET}} {$encumbrance};
        };
        #case {{Lightly encumbered}} {
            #format {result} {${FG_GREEN}󰖡 %s${RESET}} {$encumbrance};
        };
        #case {{Almost unencumbered}} {
            #format {result} {${FG_BYELLOW}󰖡 %s${RESET}} {$encumbrance};
        };
        #case {{Slightly unencumbered}} {
            #format {result} {${FG_YELLOW}󰖡 %s${RESET}} {$encumbrance};
        };
        #case {{Encumbered}} {
            #format {result} {${FG_BRED}󰖡 %s${RESET}} {$encumbrance};
        };


        #default  { #format {result} {? %s} {$encumbrance};};
    };
    #return {$result};
};

pollon;

